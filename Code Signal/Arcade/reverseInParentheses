'''
Write a function that reverses characters in (possibly nested) parentheses in the input string.

Input strings will always be well-formed with matching ()s.

Example

For inputString = "(bar)", the output should be
reverseInParentheses(inputString) = "rab";
For inputString = "foo(bar)baz", the output should be
reverseInParentheses(inputString) = "foorabbaz";
For inputString = "foo(bar)baz(blim)", the output should be
reverseInParentheses(inputString) = "foorabbazmilb";
For inputString = "foo(bar(baz))blim", the output should be
reverseInParentheses(inputString) = "foobazrabblim".
Because "foo(bar(baz))blim" becomes "foo(barzab)blim" and then "foobazrabblim".

'''

def reverseInParentheses(inputString):
    for i in range(len(inputString)):
        if inputString[i] == '(':
            start = i 
        if inputString[i] == ')':
            end = i 
            return reverseInParentheses(inputString[:start] + inputString[start+1 : end][::-1] + inputString[end+1:])
    return inputString


another implementation not recursive:
def rev(s):
    st = -1
    stack=[]
    out=s
    i=0
    while i < len(out):
        if out[i]=='(':
            if st >= 0:
                stack.append(st)
            st=i
        elif out[i]==')':
            if st>=0:
                print(out[st+1:i],i)
                out=out[:st]+ out[st+1:i][::-1] + out[i+1:]
                i-=2
            if len(stack)>0:
                st=stack.pop()
            else:
                st=-1
        i+=1
    print(out) 
